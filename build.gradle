plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version "2.8.0"
    id 'org.jetbrains.changelog' version "2.0.0"
}

version = project.mod_version
group = project.mod_group
archivesBaseName = "${project.mod_id}-mc${project.mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: mc_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'gamemenumodoption'

            mods {
                gamemenumodoption {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'gamemenumodoption'

            mods {
                gamemenumodoption {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'gamemenumodoption'

            mods {
                gamemenumodoption {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'gamemenumodoption', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                gamemenumodoption {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
}
jar.finalizedBy('reobfJar')

ext.themanifest = {
    attributes([
            "Specification-Title"     : project.mod_name,
            "Specification-Vendor"    : project.mod_vendor,
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : project.mod_implevendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

jar {
    manifest themanifest
}
task devJar(type: Jar) {
    from sourceSets.main.output
    setArchiveClassifier('dev')
    manifest themanifest
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    setArchiveClassifier('sources')
    manifest themanifest
}
artifacts {
    archives devJar
    archives sourceJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

curseforge {
    if (System.getenv('curesforgeapikey') != null && "${project.curesforge_id}" != '') {
        apiKey = System.getenv('curesforgeapikey')
        project {
            id = "${project.curesforge_id}"

            changelogType = 'markdown'
            changelog = file('./LATEST_CHANGELOG.md')

            releaseType = "${project.release_type}"
            addGameVersion "${project.mc_version}"
            addGameVersion 'Java 17'

            mainArtifact(file("${project.buildDir}/libs/${project.name}-${project.mc_version}-${project.mod_version}.jar")) {
                displayName = "${project.name}-${project.mc_version}-${project.mod_version}"
            }

            addArtifact(file("${project.buildDir}/libs/${project.name}-${project.mc_version}-${project.mod_version}-sources.jar")) {
                displayName = "${project.name}-${project.mc_version}-${project.mod_version}-sources"
            }
        }
    }
}

if (System.getenv('modrinthapikey') != null && "${modrinth_id}" != '') {
    modrinth {
        token = System.getenv('modrinthapikey')
        projectId = rootProject.modrinth_id
        versionName = "${project.mod_name}-${project.minecraft_version}-${project.mod_version}"
        versionNumber = "${project.minecraft_version}-${project.mod_version}"
        versionType = project.release_type
        uploadFile = file("${project.buildDir}/libs/${project.mod_id}-mc${project.minecraft_version}-${project.mod_version}.jar")
        gameVersions = List.of(project.support_versions.split(","))
        loaders = ["forge"]
        changelog = file('./LATEST_CHANGELOG.md').text
    }
}