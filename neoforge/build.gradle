plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id "com.modrinth.minotaur" version '2.8.7'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    setArchivesBaseName("${rootProject.archives_base_name}-${project.name}-mc${rootProject.minecraft_version}")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def mainJar = file("${project.layout.buildDirectory.get().asFile}/libs/${rootProject.archives_base_name}-${project.name}-mc${rootProject.minecraft_version}-${project.mod_version}.jar")
def sourcesJar = file("${project.layout.buildDirectory.get().asFile}/libs/${rootProject.archives_base_name}-${project.name}-mc${rootProject.minecraft_version}-${project.mod_version}-sources.jar")
def changeLogFile = file('./LATEST_CHANGELOG.md')
def uploadMainName = "${rootProject.mod_display_name}-${rootProject.minecraft_version}-${project.mod_version}-NeoForge"
def uploadSourcesName = "${rootProject.mod_display_name}-${rootProject.minecraft_version}-${project.mod_version}-NeoForge-sources"

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (System.getenv('curesforgeapikey') != null && "${project.curesforge_id}" != '') {
        apiToken = System.getenv('curesforgeapikey')

        def mainFile = upload(findProperty('curesforge_id'), mainJar)
        mainFile.changelogType = 'markdown'
        mainFile.changelog = changeLogFile.text
        mainFile.releaseType = "${project.release_type}"
        mainFile.displayName = uploadMainName

        mainFile.addGameVersion(project.support_versions.split(",").toArray())
        mainFile.addJavaVersion('Java 17')
        mainFile.addModLoader('NeoForge')
        mainFile.addGameVersion('Client')

        def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
        sourcesFile.displayName = uploadSourcesName
    }
}

if (System.getenv('modrinthapikey') != null && "${modrinth_id}" != '') {
    modrinth {
        token = System.getenv('modrinthapikey')
        projectId = "${rootProject.modrinth_id}"
        versionName = uploadMainName
        versionNumber = "${rootProject.minecraft_version}-${project.mod_version}-NeoForge"
        versionType = "${project.release_type}"
        uploadFile = mainJar
        gameVersions = List.of(project.support_versions.split(","))
        loaders = ["neoforge"]
        changelog = changeLogFile.text
    }
}

